defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(visitors$x)[1]+(k-2)/p #  gives the start time in time units,
mae_1 <- matrix(NA,n-k,H)
mae_2 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_1 <- window(visitors$x, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_2 <- window(visitors$x, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(visitors$x, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<4) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- Arima(train_1, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto')
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- Arima(train_2, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto')
fcast_2 <- forecast(fit_2, h=H)
mae_1[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_2[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
}
### One Month rolling forecasting
# Expanding Window
train_1 <- window(visitors$x, end=st + i/p)  ## Window Length: k+i
### One Month rolling forecasting
# Expanding Window
train_1 <- window(visitors$x, end=st + i/p)  ## Window Length: k+i
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(visitors$x)[1]+(k-2)/p #  gives the start time in time units,
mae_1 <- matrix(NA,n-k,H)
mae_2 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(visitors$x)[1]+(k-2)/p #  gives the start time in time units,
mae_1 <- matrix(NA,n-k,H)
mae_2 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_1 <- window(visitors$x, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_2 <- window(visitors$x, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(visitors$x, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<4) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- Arima(train_1, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto')
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- Arima(train_2, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto')
fcast_2 <- forecast(fit_2, h=H)
mae_1[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_2[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
}
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(visitors$x)[1]+(k-2)/p #  gives the start time in time units,
mae_1 <- matrix(NA,n-k,H)
mae_2 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_1 <- window(visitors$x, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_2 <- window(visitors$x, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(visitors$x, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<4) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- Arima(train_1, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto')
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- Arima(train_2, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto')
fcast_2 <- forecast(fit_2, h=H)
mae_1[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_2[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
}
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(visitors$x)[1]+(k-2)/p #  gives the start time in time units,
mae_1 <- matrix(NA,n-k,H)
mae_2 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_1 <- window(visitors$x, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_2 <- window(visitors$x, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(visitors$x, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<4) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- Arima(train_1, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto')
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- Arima(train_2, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto')
fcast_2 <- forecast(fit_2, h=H)
mae_1[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_2[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
}
library(TSA)
library(fpp)
library(forecast)
load('visitors_monthly.rda')
tsdisplay(visitors$x)
BoxCox.lambda(visitors$x)
visitors_box <- BoxCox(visitors$x, lambda = 0.061)
tsdisplay(visitors_box)
auto <- auto.arima(visitors$x,lambda = 'auto')
auto
ets <- ets(visitors$x)
ets
library(TSA)
library(fpp)
library(forecast)
load('visitors_monthly.rda')
data <- ts(visitors$x, start = c(1985,5), end = c(2005,4), frequency = 12)
tsdisplay(data)
BoxCox.lambda(data)
data_box <- BoxCox(data, lambda = 0.278)
tsdisplay(data_box)
auto <- auto.arima(data,lambda = 'auto')
auto
ets <- ets(data)
ets
k <- 160 # minimum data length for fitting a model
n <- length(data) # Number of data points
p <- 12 ### Period
H <- 12 # Forecast Horiz
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(data)[1]+(k-2)/p #  gives the start time in time units,
mae_1 <- matrix(NA,n-k,H)
mae_2 <- matrix(NA,n-k,H)
AICc_1 <- matrix(NA,n-k,1)
AICc_2 <- matrix(NA,n-k,1)
RMSE_1 <- matrix(NA,n-k,H)
RMSE_2 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_1 <- window(data, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_2 <- window(data, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(data, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<81) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- Arima(train_1, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto', method="ML")
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- Arima(train_2, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto', method="ML")
fcast_2 <- forecast(fit_2, h=H)
mae_1[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_2[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
AICc_1[i,1] <- fit_1$aicc
AICc_2[i,1] <- fit_2$aicc
RMSE_1[i,1:length(test)] <- (fcast_1[['mean']]-test)^2
RMSE_2[i,1:length(test)] <- (fcast_2[['mean']]-test)^2
}
plot(colMeans(mae_1,na.rm=TRUE), type="l",col=1,xlab="horizon", ylab="MAE")
lines(colMeans(mae_2,na.rm=TRUE), type="l",col=2)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window"),col=1:3,lty=1)
plot(AICc_1, type="l",col=1,xlab="horizon", ylab="AICc" , ylim = c(-1000,800))
lines(AICc_2, type="l",col=2)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window"),col=1:2,lty=1)
plot(sqrt(colMeans(RMSE_1,na.rm=TRUE)), type="l",col=1,xlab="horizon", ylab="RMSE")
lines(sqrt(colMeans(RMSE_2,na.rm=TRUE)), type="l",col=2)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window"),col=1:3,lty=1)
plot(sqrt(colMeans(RMSE_3,na.rm=TRUE)), type="l",col=1,xlab="horizon", ylab="RMSE")
k <- 160 # minimum data length for fitting a model
n <- length(data) # Number of data points
p <- 12 ### Period
H <- 12 # Forecast Horiz
# For ets
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(data)[1]+(k-2)/p #  gives the start time in time units,
mae_3 <- matrix(NA,n-k,H)
mae_4 <- matrix(NA,n-k,H)
AICc_3 <- matrix(NA,n-k,1)
AICc_4 <- matrix(NA,n-k,1)
RMSE_3 <- matrix(NA,n-k,H)
RMSE_4 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_1 <- window(data, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_2 <- window(data, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(data, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<81) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- ets(train_1,model = 'MAM')
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- ets(train_2,model = 'MAM')
fcast_2 <- forecast(fit_2, h=H)
mae_3[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_4[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
AICc_3[i,1] <- fit_1$aicc
AICc_4[i,1] <- fit_2$aicc
RMSE_3[i,1:length(test)] <-  (fcast_1[['mean']]-test)^2
RMSE_4[i,1:length(test)] <-  (fcast_2[['mean']]-test)^2
}
plot(colMeans(mae_3,na.rm=TRUE), type="l",col=1,xlab="horizon", ylab="MAE")
lines(colMeans(mae_4,na.rm=TRUE), type="l",col=2)
legend("topleft",legend=c("ETS - Expanding Window","ETS - Sliding Window"),col=1:3,lty=1)
plot(AICc_3, type="l",col=1,xlab="horizon", ylab="AICc")
lines(AICc_4, type="l",col=2)
legend("topleft",legend=c("ETS - Expanding Window","ETS - Sliding Window"),col=1:2,lty=1)
plot(sqrt(colMeans(RMSE_3,na.rm=TRUE)), type="l",col=1,xlab="horizon", ylab="RMSE")
lines(sqrt(colMeans(RMSE_4,na.rm=TRUE)), type="l",col=2)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window"),col=1:3,lty=1)
plot(colMeans(mae_1,na.rm=TRUE), type="l",col=1,xlab="horizon", ylab="MAE")
lines(colMeans(mae_2,na.rm=TRUE), type="l",col=2)
lines(colMeans(mae_3,na.rm=TRUE), type="l",col=3)
lines(colMeans(mae_4,na.rm=TRUE), type="l",col=4)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window","ETS - Expanding Window","ETS - Sliding Window"),col=1:3,lty=1)
plot(AICc_1, type="l",col=1,xlab="horizon", ylab="AICc")
lines(AICc_2, type="l",col=2)
lines(AICc_3, type="l",col=3)
lines(AICc_4, type="l",col=4)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window","ETS - Expanding Window","ETS - Sliding Window"),col=1:4,lty=1)
library(TSA)
library(fpp)
library(forecast)
load('visitors_monthly.rda')
data <- ts(visitors$x, start = c(1985,5), end = c(2005,4), frequency = 12)
tsdisplay(data)
BoxCox.lambda(data)
data_box <- BoxCox(data, lambda = 0.278)
tsdisplay(data_box)
auto <- auto.arima(data,lambda = 'auto')
auto
ets <- ets(data)
ets
k <- 160 # minimum data length for fitting a model
n <- length(data) # Number of data points
p <- 12 ### Period
H <- 12 # Forecast Horiz
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(data)[1]+(k-2)/p #  gives the start time in time units,
mae_1 <- matrix(NA,n-k,H)
mae_2 <- matrix(NA,n-k,H)
AICc_1 <- matrix(NA,n-k,1)
AICc_2 <- matrix(NA,n-k,1)
RMSE_1 <- matrix(NA,n-k,H)
RMSE_2 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_1 <- window(data, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_2 <- window(data, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(data, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<81) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- Arima(train_1, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto', method="ML")
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- Arima(train_2, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto', method="ML")
fcast_2 <- forecast(fit_2, h=H)
mae_1[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_2[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
AICc_1[i,1] <- fit_1$aicc
AICc_2[i,1] <- fit_2$aicc
RMSE_1[i,1:length(test)] <- (fcast_1[['mean']]-test)^2
RMSE_2[i,1:length(test)] <- (fcast_2[['mean']]-test)^2
}
k <- 160 # minimum data length for fitting a model
n <- length(data) # Number of data points
p <- 12 ### Period
H <- 12 # Forecast Horiz
# For ets
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(data)[1]+(k-2)/p #  gives the start time in time units,
mae_3 <- matrix(NA,n-k,H)
mae_4 <- matrix(NA,n-k,H)
AICc_3 <- matrix(NA,n-k,1)
AICc_4 <- matrix(NA,n-k,1)
RMSE_3 <- matrix(NA,n-k,H)
RMSE_4 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_1 <- window(data, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_2 <- window(data, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(data, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<81) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- ets(train_1,model = 'MAM')
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- ets(train_2,model = 'MAM')
fcast_2 <- forecast(fit_2, h=H)
mae_3[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_4[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
AICc_3[i,1] <- fit_1$aicc
AICc_4[i,1] <- fit_2$aicc
RMSE_3[i,1:length(test)] <-  (fcast_1[['mean']]-test)^2
RMSE_4[i,1:length(test)] <-  (fcast_2[['mean']]-test)^2
}
plot(colMeans(mae_1,na.rm=TRUE), type="l",col=1,xlab="horizon", ylab="MAE")
lines(colMeans(mae_2,na.rm=TRUE), type="l",col=2)
lines(colMeans(mae_3,na.rm=TRUE), type="l",col=3)
lines(colMeans(mae_4,na.rm=TRUE), type="l",col=4)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window","ETS - Expanding Window","ETS - Sliding Window"),col=1:4,lty=1)
plot(AICc_1, type="l",col=1,xlab="horizon", ylab="AICc")
lines(AICc_2, type="l",col=2)
lines(AICc_3, type="l",col=3)
lines(AICc_4, type="l",col=4)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window","ETS - Expanding Window","ETS - Sliding Window"),col=1:4,lty=1)
plot(sqrt(colMeans(RMSE_1,na.rm=TRUE)), type="l",col=1,xlab="horizon", ylab="RMSE")
lines(sqrt(colMeans(RMSE_2,na.rm=TRUE)), type="l",col=2)
lines(sqrt(colMeans(RMSE_3,na.rm=TRUE)), type="l",col=3)
lines(sqrt(colMeans(RMSE_4,na.rm=TRUE)), type="l",col=4）
plot(sqrt(colMeans(RMSE_1,na.rm=TRUE)), type="l",col=1,xlab="horizon", ylab="RMSE")
lines(sqrt(colMeans(RMSE_2,na.rm=TRUE)), type="l",col=2)
lines(sqrt(colMeans(RMSE_3,na.rm=TRUE)), type="l",col=3)
lines(sqrt(colMeans(RMSE_4,na.rm=TRUE)), type="l",col=4)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window","ETS - Expanding Window","ETS - Sliding Window"),col=1:4,lty=1)
AICc_3
AICc_4
plot(AICc_1, type="l",col=1,xlab="horizon", ylab="AICc")
lines(AICc_2, type="l",col=2)
lines(AICc_3, type="l",col=3)
lines(AICc_4, type="l",col=4)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window","ETS - Expanding Window","ETS - Sliding Window"),col=1:4,lty=1)
plot(AICc_1, type="l",col=1,xlab="horizon", ylab="AICc",ylim=c(-500,3000))
lines(AICc_2, type="l",col=2)
lines(AICc_3, type="l",col=3)
lines(AICc_4, type="l",col=4)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window","ETS - Expanding Window","ETS - Sliding Window"),col=1:4,lty=1)
plot(AICc_1, type="l",col=1,xlab="horizon", ylab="AICc",ylim=c(-1000,2500))
lines(AICc_2, type="l",col=2)
lines(AICc_3, type="l",col=3)
lines(AICc_4, type="l",col=4)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window","ETS - Expanding Window","ETS - Sliding Window"),col=1:4,lty=1)
library(TSA)
library(fpp)
library(forecast)
load('visitors_monthly.rda')
data <- ts(visitors$x, start = c(1985,5), end = c(2005,4), frequency = 12)
tsdisplay(data)
BoxCox.lambda(data)
data_box <- BoxCox(data, lambda = 0.278)
tsdisplay(data_box)
auto <- auto.arima(data,lambda = 'auto')
auto
ets <- ets(data)
ets
k <- 160 # minimum data length for fitting a model
n <- length(data) # Number of data points
p <- 12 ### Period
H <- 12 # Forecast Horiz
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(data)[1]+(k-2)/p #  gives the start time in time units,
mae_1 <- matrix(NA,n-k,H)
mae_2 <- matrix(NA,n-k,H)
AICc_1 <- matrix(NA,n-k,1)
AICc_2 <- matrix(NA,n-k,1)
RMSE_1 <- matrix(NA,n-k,H)
RMSE_2 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_1 <- window(data, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_2 <- window(data, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(data, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<81) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- Arima(train_1, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto', method="ML")
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- Arima(train_2, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto', method="ML")
fcast_2 <- forecast(fit_2, h=H)
mae_1[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_2[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
AICc_1[i,1] <- fit_1$aicc
AICc_2[i,1] <- fit_2$aicc
RMSE_1[i,1:length(test)] <- (fcast_1[['mean']]-test)^2
RMSE_2[i,1:length(test)] <- (fcast_2[['mean']]-test)^2
}
k <- 160 # minimum data length for fitting a model
n <- length(data) # Number of data points
p <- 12 ### Period
H <- 12 # Forecast Horiz
# For ets
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(data)[1]+(k-2)/p #  gives the start time in time units,
mae_3 <- matrix(NA,n-k,H)
mae_4 <- matrix(NA,n-k,H)
AICc_3 <- matrix(NA,n-k,1)
AICc_4 <- matrix(NA,n-k,1)
RMSE_3 <- matrix(NA,n-k,H)
RMSE_4 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_3 <- window(data, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_4 <- window(data, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(data, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<81) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_3), "len(Sliding Window):",length(train_4), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_3)[1],'-',tsp(train_3)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_4)[1],'-',tsp(train_4)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_3 <- ets(train_3,model = 'MAM')
fcast_3 <- forecast(fit_3, h=H)
fit_4 <- ets(train_4,model = 'MAM')
fcast_4 <- forecast(fit_4, h=H)
mae_3[i,1:length(test)] <- abs(fcast_3[['mean']]-test)
mae_4[i,1:length(test)] <- abs(fcast_4[['mean']]-test)
AICc_3[i,1] <- fit_3$aicc
AICc_4[i,1] <- fit_4$aicc
RMSE_3[i,1:length(test)] <-  (fcast_3[['mean']]-test)^2
RMSE_4[i,1:length(test)] <-  (fcast_4[['mean']]-test)^2
}
plot(colMeans(mae_1,na.rm=TRUE), type="l",col=1,xlab="horizon", ylab="MAE")
lines(colMeans(mae_2,na.rm=TRUE), type="l",col=2)
lines(colMeans(mae_3,na.rm=TRUE), type="l",col=3)
lines(colMeans(mae_4,na.rm=TRUE), type="l",col=4)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window","ETS - Expanding Window","ETS - Sliding Window"),col=1:4,lty=1)
plot(AICc_1, type="l",col=1,xlab="horizon", ylab="AICc",ylim=c(-1000,2500))
lines(AICc_2, type="l",col=2)
lines(AICc_3, type="l",col=3)
lines(AICc_4, type="l",col=4)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window","ETS - Expanding Window","ETS - Sliding Window"),col=1:4,lty=1)
plot(sqrt(colMeans(RMSE_1,na.rm=TRUE)), type="l",col=1,xlab="horizon", ylab="RMSE")
lines(sqrt(colMeans(RMSE_2,na.rm=TRUE)), type="l",col=2)
lines(sqrt(colMeans(RMSE_3,na.rm=TRUE)), type="l",col=3)
lines(sqrt(colMeans(RMSE_4,na.rm=TRUE)), type="l",col=4)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window","ETS - Expanding Window","ETS - Sliding Window"),col=1:4,lty=1)
