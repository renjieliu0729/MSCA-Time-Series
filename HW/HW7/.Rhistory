train_2 <- window(data, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(data, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<81) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- ets(train_1,model = 'MAM')
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- ets(train_2,model = 'MAM')
fcast_2 <- forecast(fit_2, h=H)
mae_3[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_4[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
AICc_3[i,1] <- fit_1$aicc
AICc_4[i,1] <- fit_2$aicc
RMSE_3[i,1:length(test)] <- sqrt(sum(fcast_1[['mean']]-test)^2)
RMSE_4[i,1:length(test)] <- sqrt(sum(fcast_2[['mean']]-test)^2)
}
plot(colMeans(mae_3,na.rm=TRUE), type="l",col=1,xlab="horizon", ylab="MAE")
lines(colMeans(mae_4,na.rm=TRUE), type="l",col=2)
legend("topleft",legend=c("ETS - Expanding Window","ETS - Sliding Window"),col=1:3,lty=1)
plot(AICc_3, type="l",col=1,xlab="horizon", ylab="AICc")
lines(AICc_4, type="l",col=2)
legend("topleft",legend=c("ETS - Expanding Window","ETS - Sliding Window"),col=1:2,lty=1)
plot(colMeans(RMSE_3,na.rm=TRUE), type="l",col=1,xlab="horizon", ylab="RMSE")
lines(colMeans(RMSE_4,na.rm=TRUE), type="l",col=2)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window"),col=1:3,lty=1)
library(TSA)
library(fpp)
library(forecast)
load('visitors_monthly.rda')
data <- ts(visitors$x, start = c(1985,5), end = c(2005,4), frequency = 12)
tsdisplay(data)
BoxCox.lambda(data)
data_box <- BoxCox(data, lambda = 0.278)
tsdisplay(data_box)
auto <- auto.arima(data,lambda = 'auto')
auto
ets <- ets(data)
ets
k <- 160 # minimum data length for fitting a model
n <- length(data) # Number of data points
p <- 12 ### Period
H <- 12 # Forecast Horiz
library(TSA)
library(fpp)
library(forecast)
load('visitors_monthly.rda')
data <- ts(visitors$x, start = c(1985,5), end = c(2005,4), frequency = 12)
tsdisplay(data)
BoxCox.lambda(data)
data_box <- BoxCox(data, lambda = 0.278)
tsdisplay(data_box)
auto <- auto.arima(data,lambda = 'auto')
auto
ets <- ets(data)
ets
k <- 160 # minimum data length for fitting a model
n <- length(data) # Number of data points
p <- 12 ### Period
H <- 12 # Forecast Horiz
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(data)[1]+(k-2)/p #  gives the start time in time units,
mae_1 <- matrix(NA,n-k,H)
mae_2 <- matrix(NA,n-k,H)
AICc_1 <- matrix(NA,n-k,1)
AICc_2 <- matrix(NA,n-k,1)
RMSE_1 <- matrix(NA,n-k,H)
RMSE_2 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_1 <- window(data, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_2 <- window(data, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(data, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<81) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- Arima(train_1, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto', method="ML")
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- Arima(train_2, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto', method="ML")
fcast_2 <- forecast(fit_2, h=H)
mae_1[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_2[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
AICc_1[i,1] <- fit_1$aicc
AICc_2[i,1] <- fit_2$aicc
RMSE_1[i,1:length(test)] <- (fcast_1[['mean']]-test)^2
RMSE_2[i,1:length(test)] <- (fcast_2[['mean']]-test)^2
}
library(TSA)
library(fpp)
library(forecast)
load('visitors_monthly.rda')
data <- ts(visitors$x, start = c(1985,5), end = c(2005,4), frequency = 12)
tsdisplay(data)
BoxCox.lambda(data)
data_box <- BoxCox(data, lambda = 0.278)
tsdisplay(data_box)
auto <- auto.arima(data,lambda = 'auto')
auto
ets <- ets(data)
ets
k <- 160 # minimum data length for fitting a model
n <- length(data) # Number of data points
p <- 12 ### Period
H <- 12 # Forecast Horiz
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(data)[1]+(k-2)/p #  gives the start time in time units,
mae_1 <- matrix(NA,n-k,H)
mae_2 <- matrix(NA,n-k,H)
AICc_1 <- matrix(NA,n-k,1)
AICc_2 <- matrix(NA,n-k,1)
RMSE_1 <- matrix(NA,n-k,H)
RMSE_2 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_1 <- window(data, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_2 <- window(data, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(data, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<81) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- Arima(train_1, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto', method="ML")
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- Arima(train_2, order=c(1,0,1), seasonal=list(order=c(0,1,2), period=p),
include.drift=TRUE, lambda='auto', method="ML")
fcast_2 <- forecast(fit_2, h=H)
mae_1[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_2[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
AICc_1[i,1] <- fit_1$aicc
AICc_2[i,1] <- fit_2$aicc
RMSE_1[i,1:length(test)] <- (fcast_1[['mean']]-test)^2
RMSE_2[i,1:length(test)] <- (fcast_2[['mean']]-test)^2
}
plot(colMeans(mae_1,na.rm=TRUE), type="l",col=1,xlab="horizon", ylab="MAE")
lines(colMeans(mae_2,na.rm=TRUE), type="l",col=2)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window"),col=1:3,lty=1)
plot(AICc_1, type="l",col=1,xlab="horizon", ylab="AICc" , ylim = c(-1000,800))
lines(AICc_2, type="l",col=2)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window"),col=1:2,lty=1)
plot(sqrt(colMeans(RMSE_1,na.rm=TRUE)), type="l",col=1,xlab="horizon", ylab="RMSE")
lines(sqrt(colMeans(RMSE_2,na.rm=TRUE)), type="l",col=2)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window"),col=1:3,lty=1)
k <- 160 # minimum data length for fitting a model
n <- length(data) # Number of data points
p <- 12 ### Period
H <- 12 # Forecast Horiz
# For ets
defaultW <- getOption("warn")
options(warn = -1)
st <- tsp(data)[1]+(k-2)/p #  gives the start time in time units,
mae_3 <- matrix(NA,n-k,H)
mae_4 <- matrix(NA,n-k,H)
AICc_3 <- matrix(NA,n-k,1)
AICc_4 <- matrix(NA,n-k,1)
RMSE_3 <- matrix(NA,n-k,H)
RMSE_4 <- matrix(NA,n-k,H)
for(i in 1:(n-k))
{
### One Month rolling forecasting
# Expanding Window
train_1 <- window(data, end=st + i/p)  ## Window Length: k+i
# Sliding Window - keep the training window of fixed length.
# The training set always consists of k observations.
train_2 <- window(data, start=st+(i-k+1)/p, end=st+i/p) ## Window Length: k
test <- window(data, start=st + (i+1)/p, end=st + (i+H)/p) ## Window Length: H
if (i<81) {
cat(c("*** CV", i,":","len(Expanding Window):",length(train_1), "len(Sliding Window):",length(train_2), "len(Test):",length(test),'\n'  ))
cat(c("*** TRAIN -  Expanding WIndow:",tsp(train_1)[1],'-',tsp(train_1)[2],'\n'))
cat(c("*** TRAIN - Sliding WIndow:",tsp(train_2)[1],'-',tsp(train_2)[2],'\n'))
cat(c("*** TEST:",tsp(test)[1],'-',tsp(test)[2],'\n'))
cat("*************************** \n \n")
}
fit_1 <- ets(train_1,model = 'MAM')
fcast_1 <- forecast(fit_1, h=H)
fit_2 <- ets(train_2,model = 'MAM')
fcast_2 <- forecast(fit_2, h=H)
mae_3[i,1:length(test)] <- abs(fcast_1[['mean']]-test)
mae_4[i,1:length(test)] <- abs(fcast_2[['mean']]-test)
AICc_3[i,1] <- fit_1$aicc
AICc_4[i,1] <- fit_2$aicc
RMSE_3[i,1:length(test)] <-  (fcast_1[['mean']]-test)^2
RMSE_4[i,1:length(test)] <-  (fcast_2[['mean']]-test)^2
}
plot(colMeans(mae_3,na.rm=TRUE), type="l",col=1,xlab="horizon", ylab="MAE")
lines(colMeans(mae_4,na.rm=TRUE), type="l",col=2)
legend("topleft",legend=c("ETS - Expanding Window","ETS - Sliding Window"),col=1:3,lty=1)
plot(AICc_3, type="l",col=1,xlab="horizon", ylab="AICc")
lines(AICc_4, type="l",col=2)
legend("topleft",legend=c("ETS - Expanding Window","ETS - Sliding Window"),col=1:2,lty=1)
plot(sqrt(colMeans(RMSE_3,na.rm=TRUE)), type="l",col=1,xlab="horizon", ylab="RMSE")
lines(sqrt(colMeans(RMSE_4,na.rm=TRUE)), type="l",col=2)
legend("topleft",legend=c("ARIMA - Expanding Window","ARIMA - Sliding Window"),col=1:3,lty=1)
setwd("~/Desktop/Spring2021/Time/HW/HW7")
library(fpp)
library(TSA)
library(forecast)
load('motel.rda')
motel
motel$CPI
motel$cpi
tsdisplay(motel)
motel
load('motel.rda')
tsdisplay(motel)
tsdisplay(motel[3])
load('motel.rda')
tsdisplay(motel['CPI'])
tsdisplay(motel['CPI'])
load('motel.rda')
tsdisplay(motel[['CPI']])
tsdisplay(motel[,'CPI;])
tsdisplay(motel[,'CPI'])
motel[,'cpi']
motel[,'CPI']
motel
load('motel.rda')
motel[,'Cost'] <- motel[,'Takings']*1000 / motel[,'Roomnights']
load('motel.rda')
cost <- motel[,'Takings']*1000 / motel[,'Roomnights']
cost
tsdisplay(motel[,'CPI'])
tsdisplay(cost)
load('motel.rda')
cost <- motel[,'Takings']*1000 / motel[,'Roomnights']
tsdisplay(motel[,'CPI'])
tsdisplay(cost)
library(fpp)
library(TSA)
library(forecast)
library(fpp)
library(TSA)
library(forecast)
load('motel.rda')
cost <- motel[,'Takings']*1000 / motel[,'Roomnights']
cpi <- motel[,'cpi']
cost <- motel[,'Takings']*1000 / motel[,'Roomnights']
cpi <- motel[,'CPI']
tsdisplay(cpi)
tsdisplay(cost)
plot(x = cpi, y = cost)
cor(cpi,cost)
library(fpp)
library(TSA)
library(forecast)
load('motel.rda')
cost <- motel[,'Takings']*1000 / motel[,'Roomnights']
cpi <- motel[,'CPI']
tsdisplay(cpi)
tsdisplay(cost)
plot(x = cpi, y = cost)
cor(cpi,cost)
plot(x = log(cpi), y = log(cost))
cor(log(cpi),log(cost))
lm1 <- tslm(log(cost)~log(cpi))
lm1
plot(lm1)
plot(lm1$fitted.values)
plot(lm1$fitted.values, col = 'g')
plot(lm1$fitted.values, col = 'green')
plot(lm1$fitted.values, col = 'green')
lines(x = log(cpi),y = log(cost),col="b")
plot(lm1$fitted.values, col = 'green')
lines(x = log(cpi),y = log(cost),col="b")
plot(lm1$fitted.values, col = 'green')
lines(log(cpi),log(cost),col="b")
plot(lm1$fitted.values, col = 'green')
lines(log(cost),col="b")
library(ggplot2)
library(fpp)
library(TSA)
library(forecast)
load('motel.rda')
g <- ggplot(lm1$fitted.values)
g
g <- ggplot() + geom_line(data = lm1$fitted.values, color = "blue") +
geom_line(aes(x = log(cpi), y = log(cost), color = "red") +
xlab('Log(CPI)') +
ylab('Log(Cost)')
g
g <- ggplot() + geom_line(data = lm1$fitted.values, color = "blue") +
geom_line(aes(x = log(cpi), y = log(cost), color = "red") +
xlab('Log(CPI)') + ylab('Log(Cost)')
g
g <- ggplot() + geom_line(data = lm1$fitted.values, color = "blue") +
print(g)
print(g)
g
g <- ggplot() + geom_line(data = lm1$fitted.values, color = "blue") +
g
checkresiduals(lm1)
lm1 <- tslm(log(cost)~log(cpi))
lm1
checkresiduals(lm1)
ggplot()+geom_point(lm1$fitted.values)
ggplot()+geom_point(aesl(m1$fitted.values))
ggplot()+geom_point(aesl(m1$fitted.values))
ggplot()+geom_point(aes(m1$fitted.values))
ggplot()+geom_point(aes(lm1$fitted.values))
ggplot()+geom_point(aes(y = lm1$fitted.values))
plot(lm1$fitted.values)
ggplot(x = cpi, y = cost)
ggplot(aes(x = cpi, y = cost)
ggplot(aes(x = cpi, y = cost))
ggplot(aes(x = cpi, y = cost))
g <- ggplot(aes(x = cpi, y = cost))
plot(x = log(cpi), y = log(cost), col = 'green')
points(lm1$fitted.values, col = 'black')
plot(x = log(cpi), y = log(cost), col = 'green')
points(lm1$fitted.values, col = 'black')
plot(x = log(cpi), y = log(cost), col = 1)
points(lm1$fitted.values, col = 2)
plot(x = log(cpi), y = log(cost), col = 1)
points(lm1$fitted.values, col = 2)
legend('topleft', legend = c('actual' , 'fitted'), col = 1:2)
plot(x = log(cpi), y = log(cost), col = 1)
points(lm1$fitted.values, col = 2)
legend('topleft', legend = c('actual' , 'fitted'), col = 1:2, lty = 1)
library(ggplot2)
library(fpp)
library(TSA)
library(forecast)
load('motel.rda')
cost <- motel[,'Takings']*1000 / motel[,'Roomnights']
cpi <- motel[,'CPI']
tsdisplay(cpi)
tsdisplay(cost)
plot(x = cpi, y = cost)
cor(cpi,cost)
plot(x = log(cpi), y = log(cost))
cor(log(cpi),log(cost))
lm1 <- tslm(log(cost)~log(cpi))
lm1
checkresiduals(lm1)
plot(x = log(cpi), y = log(cost), col = 1)
points(lm1$fitted.values, col = 2)
legend('topleft', legend = c('actual' , 'fitted'), col = 1:2, lty = 1)
plot(x = log(cpi), y = log(cost), col = 1)
plot(x = log(cpi), y = log(cost), col = 1)
points(lm1$fitted.values, col = 2)
plot(x = log(cpi), y = log(cost), col = 1)
points(lm1$fitted.values, col = 2)
legend('topleft', legend = c('actual' , 'fitted'), col = 1:2, lty = 1)
plot(lm1)
plot(x = log(cpi), y = log(cost), col = 1)
abline(lm1)
legend('topleft', legend = c('actual' , 'fitted'), col = 1:2, lty = 1)
plot(x = log(cpi), y = log(cost), col = 1)
abline(lm1, col = 2)
legend('topleft', legend = c('actual' , 'fitted'), col = 1:2, lty = 1)
?lty
?legend
plot(x = log(cpi), y = log(cost), col = 1)
abline(lm1, col = 2)
legend('topleft', legend = c('actual' , 'Trend'), col = 1:2, lty = 2)
plot(x = log(cpi), y = log(cost), col = 1)
abline(lm1, col = 2)
legend('topleft', legend = c('actual' , 'Trend'), col = 1:2, lty = 10)
plot(x = log(cpi), y = log(cost), col = 1)
abline(lm1, col = 2)
legend('topleft', legend = c('actual' , 'Trend'), col = 1:2, lty = 1)
summary(lm1)
summary(lm1)
library(ggplot2)
library(fpp)
library(TSA)
library(forecast)
load('motel.rda')
library(ggplot2)
library(fpp)
library(TSA)
library(forecast)
load('motel.rda')
cost <- motel[,'Takings']*1000 / motel[,'Roomnights']
cpi <- motel[,'CPI']
data <- c(CPI = motel[,'CPI'] , Cost = motel[,'Takings']*1000 / motel[,'Roomnights'])
tsdisplay(cpi)
tsdisplay(cost)
plot(x = cpi, y = cost)
cor(cpi,cost)
plot(x = log(cpi), y = log(cost))
cor(log(cpi),log(cost))
lm1 <- tslm(log(Cost)~log(CPI), data = data)
data
library(ggplot2)
library(fpp)
library(TSA)
library(forecast)
load('motel.rda')
cost <- motel[,'Takings']*1000 / motel[,'Roomnights']
cpi <- motel[,'CPI']
data <- c(CPI = motel[,'CPI'] , Cost = motel[,'Takings']*1000 / motel[,'Roomnights'])
tsdisplay(cpi)
tsdisplay(cost)
data
cost <- motel[,'Takings']*1000 / motel[,'Roomnights']
cpi <- motel[,'CPI']
data <- cbind(CPI = motel[,'CPI'] , Cost = motel[,'Takings']*1000 / motel[,'Roomnights'])
tsdisplay(cpi)
tsdisplay(cost)
data
plot(x = cpi, y = cost)
cor(cpi,cost)
plot(x = log(cpi), y = log(cost))
cor(log(cpi),log(cost))
lm1 <- tslm(log(Cost)~log(CPI), data = data)
data
lm1 <- tslm(log(data$Cost)~log(data$CPI), data = data)
cpi
Cost
cost
cpi
lm1 <- tslm(log(cost)~log(cpi))
lm1
plot(x = log(cpi), y = log(cost), col = 1)
abline(lm1, col = 2)
legend('topleft', legend = c('actual' , 'Trend'), col = 1:2, lty = 1)
summary(lm1)
checkresiduals(lm1)
auto1
auto1 <- auto.arima(lambda = 'auto', y = cost, xreg = cpi, stepwise = FALSE, approximation = FALSE)
auto1
summary(auto1)
checkresiduals(auto1)
auto1 <- auto.arima(lambda = 'auto', y = cost, xreg = ( cpi = cpi), stepwise = FALSE, approximation = FALSE)
summary(auto1)
xreg = cbind(CPI = cpi)
auto1 <- auto.arima(lambda = 'auto', y = cost, xreg = xreg), stepwise = FALSE, approximation = FALSE)
xreg = cbind(CPI = cpi)
auto1 <- auto.arima(lambda = 'auto', y = cost, xreg = xreg, stepwise = FALSE, approximation = FALSE)
summary(auto1)
library(ggplot2)
library(fpp)
library(TSA)
library(forecast)
load('motel.rd```
```{r}
c
load('motel.rda')
library(ggplot2)
library(fpp)
library(TSA)
library(forecast)
load('motel.rda')
ost <- motel[,'Takings']*1000 / motel[,'Roomnights']
cpi <- motel[,'CPI']
data <- cbind(CPI = motel[,'CPI'] , Cost = motel[,'Takings']*1000 / motel[,'Roomnights'])
tsdisplay(cpi)
tsdisplay(cost)
load('motel.rda')
cost <- motel[,'Takings']*1000 / motel[,'Roomnights']
cpi <- motel[,'CPI']
data <- cbind(CPI = motel[,'CPI'] , Cost = motel[,'Takings']*1000 / motel[,'Roomnights'])
tsdisplay(cpi)
tsdisplay(cost)
plot(x = cpi, y = cost)
cor(cpi,cost)
plot(x = log(cpi), y = log(cost))
cor(log(cpi),log(cost))
lm1 <- tslm(log(cost)~log(cpi))
lm1
plot(x = log(cpi), y = log(cost), col = 1)
abline(lm1, col = 2)
legend('topleft', legend = c('actual' , 'Trend'), col = 1:2, lty = 1)
summary(lm1)
checkresiduals(lm1)
summary(lm1)
checkresiduals(lm1)
auto1 <- auto.arima(D = 1,lambda = 0, y = cost, xreg = cpi)
summary(auto1)
checkresiduals(auto1)
naive_cpi <- naive(cpi, h=18, level=c(80,95))
plot(naive_cpi)
f1 <- forecast(auto1, h = 18, xreg = naive_cpi$mean)
f1
plot(f1,col = 1)
naive_cpi$mean
f1 <- forecast(auto1, h = 18, xreg = naive_cpi$mean)
f1
plot(f1)
x <- cbind(log(cost),log(cpi))
var1 <- VAR(x,p=10, type='both', season = 12)
library(vars)
x <- cbind(log(cost),log(cpi))
var1 <- VAR(x,p=10, type='both', season = 12)
var1
var_pred <- forecast(var1,h=18)
var_pred
plot(var_pred)
plot(acf(residuals(var1)))
