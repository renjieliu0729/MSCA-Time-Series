fore1 <- forecast(auto,h=4,level = c(80, 95))
fore1 <- fore1$mean[1:4]
fore1 <- InvBoxCox(fore1, 0.23)
actual <- usgdp[usgdp$Year>2012,]
err <- actual$GDP - fore1
plot(err)
# The forecase is getting larger.
sum((err)^2)
fore1
actual
actual$GDP
fore1
actual$GDP-fore1
library(fpp)
library(TSA)
load('usgdp.rda')
gdp <- ts(usgdp$GDP, frequency = 1,start = 1960)
train <- window(gdp,start = 1960, end = 2012)
test <- window(gdp,start = 2013, end = 2017)
plot(train)
# The box - cox transformation is necessary for this data because the data is increasing exponentianally. larger variance between lags as time progress.
BoxCox.lambda(train)
train <- BoxCox(train, lambda = 0.23)
plot(train)
library(tseries)
# first order difference of the data
plot(diff(train,differences = 1))
# second order difference of the data
plot(diff(train,differences = 2))
#Use kpss.test to test stationary
kpss.test(diff(train,differences = 1))
kpss.test(diff(train,differences = 2))
# Based on the kpss test. Both the first and second order difference of the data is stationary. Because the p-value is larger than 0.05, so fail to reject the null hypothesis that the time series is stationary.
auto <- auto.arima(train,seasonal = FALSE)
auto
## The best model from auto arima is p = 1, d = 1, and q = 0. This means that the model uses first order auto regression with first order differencing, and the model does not have moving average in the model. Drift is the intercept of the model. The Coefficients for ar1 is 0.4731
eacf(train)
# based on the eacf, p and q can have the combination of (1,1),(1,2),(2,1)
summary(Arima(train, order=c(1,1,1), include.drift = TRUE))
summary(Arima(train, order=c(1,1,2),include.drift = TRUE))
summary(Arima(train, order=c(2,1,1),include.drift = TRUE))
# Based on the AICc value. the auto arima model has the smallest AICc value. It is better than the than the three Arima models. Becuase the AICc = 444.88 which is the lowest.
# Forecase for four years so h = 4
plot(forecast(auto,h=4,level = c(80, 95)))
fore1 <- forecast(auto,h=4,level = c(80, 95))
fore1 <- fore1$mean[1:4]
fore1 <- InvBoxCox(fore1, 0.23)
actual <- usgdp[usgdp$Year>2012,]
err <- actual$GDP - fore1
plot(err)
# The forecase is getting larger.
sum((err)^2)
setwd("~/Desktop/Spring2021/Time/HW/HW4/Traffic Flow Data")
data <- read.csv('I-57-2013-June-16.xls')
library("readxl")
data <- read_excel('I-57-2013-June-16.xls')
library("readxl")
data <- read_excel('I-57-2013-June-16.xls')
View(data)
data <- read_excel('I-57-2013-June-16.xls')
View(data)
setwd("~/Desktop/Spring2021/Time/HW/HW4")
traffic <- read.csv('traffic.csv')
View(traffic)
traffic <- read.csv('traffic.csv')
View(traffic)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit,start = c(2013,6,16),end = (2013,7,1), frequency = 24)
ts <- ts(traffic$Exit,start = c(2013,6,16),end = c(2013,7,1), frequency = 24)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit,start = c(2013,6,16),end = c(2013,7,1), frequency = 24)
plot(ts)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit,start = c(2013,6,16),end = c(2013,7,1), frequency = 8000)
plot(ts)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit,start = c(2013,6,16),end = c(2013,7,1), frequency = 8000)
plot(ts)
ts
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit,start = c(2013,6,16),end = c(2013,7,1), frequency = 24*365)
plot(ts)
View(traffic)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit,start = '2015-06-16 00:00',end = '2015-07-01 24:00', frequency = 24*365)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit,start = '2015-06-16 00:00',end = '2015-07-01 24:00', frequency = 24*365)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit,start = '2015-06-16 00:00',end = '2015-07-01 24:00', frequency = 24*365)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit,start = '2015-06-16 00:00',end = '2015-07-01 24:00', frequency = 24*365)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit,start = '2015-06-16 01:00',end = '2015-07-01 00:00', frequency = 24*365)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit,start = '2015-06-16 01:00',end = '2015-07-01 00:00', frequency = 24*365)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 24*365)
plot(ts)
View(traffic)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 24*365)
plot(ts)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
train <- ts(traffic$Exit[1:360,], frequency = 1)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
train <- ts(traffic$Exit[1:360,], frequency = 1)
train <- ts(traffic$Exit[1:360,], frequency = 1)
traffic$Exit[1:360,]
traffic$Exit[1:360]
train <- ts(traffic$Exit[1:360], frequency = 1)
train <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
train <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
test <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
tsdisplay(test)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
test <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
tsdisplay(test)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
auto.arima(train, stepwise = FALSE, approximation = FALSE)
auto.arima(train, stepwise = FALSE, approximation = FALSE, seasonal = TRUE)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
test <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
tsdisplay(test)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
train1 <- ts(traffic$Exit[1:360], frequency = 7*24)
auto.arima(train, stepwise = FALSE, approximation = FALSE, seasonal = TRUE)
train1 <- ts(traffic$Exit[1:360], frequency = 7*24)
auto.arima(train1, stepwise = FALSE, approximation = FALSE, seasonal = TRUE)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
test <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
tsdisplay(test)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
test <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
tsdisplay(test)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
test <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
tsdisplay(test)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
test <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
test <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
library(fpp)
library(TSA)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
test <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
kpss.test(train)
Arima(train, order = c(2,0,0))
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
Arima(train, order = c(2,0,0))
Arima(train, order = c(2,0,0))
auto
eacf(train)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
eacf(train)
Arima(train, order = c(2,0,4))
Arima(train, order = c(0,0,4))
Arima(train, order = c(1,0,4))
kpss.test(train)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
# Use eacf to check for possible values for p and q
eacf(train)
Arima(train, order = c(2,0,4))
Arima(train, order = c(0,0,4))
Arima(train, order = c(1,0,4))
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
# Use eacf to check for possible values for p and q
eacf(train)
Arima(train, order = c(2,0,4))
Arima(train, order = c(0,0,4))
Arima(train, order = c(1,0,4))
checkresiduals(auto)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
# Use eacf to check for possible values for p and q
eacf(train)
Arima(train, order = c(2,0,4))
Arima(train, order = c(0,0,4))
Arima(train, order = c(1,0,4))
checkresiduals(auto)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
# Use eacf to check for possible values for p and q
eacf(train)
Arima(train, order = c(2,0,4))
Arima(train, order = c(0,0,4))
Arima(train, order = c(1,0,4))
checkresiduals(auto)
shapiro.test(auto$residuals)
library(fpp)
library(TSA)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
test <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
# Use eacf to check for possible values for p and q
eacf(train)
Arima(train, order = c(2,0,4))
Arima(train, order = c(0,0,4))
Arima(train, order = c(1,0,4))
checkresiduals(auto)
shapiro.test(auto$residuals)
train1 <- ts(traffic$Exit[1:360], frequency = 7*24)
auto.arima(train1, stepwise = FALSE, approximation = FALSE, seasonal = TRUE)
train1 <- ts(traffic$Exit[1:360], frequency = 7*24)
auto2<- auto.arima(train1, stepwise = FALSE, approximation = FALSE, seasonal = TRUE)
auto2
plot(forecast(auto1,h=24,level = c(80, 95)))
plot(forecast(auto2,h=24,level = c(80, 95)))
plot(forecast(auto2,h=1,level = c(80, 95)))
plot(forecast(auto2,h=24,level = c(80, 95)))
fore1 <- forecast(auto2,h=24,level = c(80, 95))
plot(fore1)
train1 <- ts(traffic$Exit[1:360], frequency = 24)
auto3<- auto.arima(train1, stepwise = FALSE, approximation = FALSE, seasonal = TRUE)
auto3
fore2 <- forecast(auto3,h=24,level = c(80, 95))
plot(fore2)
library(fpp)
library(TSA)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
test <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
# Use eacf to check for possible values for p and q
eacf(train)
Arima(train, order = c(2,0,4))
Arima(train, order = c(0,0,4))
Arima(train, order = c(1,0,4))
checkresiduals(auto)
shapiro.test(auto$residuals)
library(fpp)
library(TSA)
# Manually combine the excel file into one cxv file
traffic <- read.csv('traffic.csv')
ts <- ts(traffic$Exit, frequency = 1)
plot(ts)
library(forecast)
train <- ts(traffic$Exit[1:360], frequency = 1)
test <- ts(traffic$Exit[361:384], frequency = 1)
tsdisplay(train)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
# Use eacf to check for possible values for p and q
eacf(train)
Arima(train, order = c(2,0,4))
Arima(train, order = c(0,0,4))
Arima(train, order = c(1,0,4))
checkresiduals(auto)
shapiro.test(auto$residuals)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
# Use eacf to check for possible values for p and q
eacf(train)
Arima(train, order = c(2,0,4))
Arima(train, order = c(0,0,4))
Arima(train, order = c(1,0,4))
checkresiduals(auto)
shapiro.test(auto$residuals)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
# Use eacf to check for possible values for p and q
eacf(train)
Arima(train, order = c(2,0,0))
Arima(train, order = c(2,0,4))
Arima(train, order = c(0,0,4))
Arima(train, order = c(1,0,4))
checkresiduals(auto)
shapiro.test(auto$residuals)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
# Use eacf to check for possible values for p and q
eacf(train)
train1 <- ts(traffic$Exit[1:360], frequency = 7*24)
auto2<- auto.arima(train1, stepwise = FALSE, approximation = FALSE, seasonal = TRUE)
auto2
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
a1 <- Arima(train, order = c(2,0,0))
a2 <- Arima(train, order = c(2,0,4))
a3 <- Arima(train, order = c(2,0,1))
checkresiduals(auto)
checkresiduals(a1)
checkresiduals(a2)
checkresiduals(a3)
shapiro.test(auto$residuals)
shapiro.test(a1$residuals)
shapiro.test(a2$residuals)
shapiro.test(a3$residuals)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
a1 <- Arima(train, order = c(2,0,0))
a1
a2 <- Arima(train, order = c(2,0,4))
a2
a3 <- Arima(train, order = c(2,0,1))
a3
checkresiduals(auto)
checkresiduals(a1)
checkresiduals(a2)
checkresiduals(a3)
shapiro.test(auto$residuals)
shapiro.test(a1$residuals)
shapiro.test(a2$residuals)
shapiro.test(a3$residuals)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
a1 <- Arima(train, order = c(2,0,0))
a1
a2 <- Arima(train, order = c(2,0,4))
a2
a3 <- Arima(train, order = c(2,0,1))
a3
checkresiduals(auto)
checkresiduals(a1)
checkresiduals(a2)
checkresiduals(a3)
shapiro.test(auto$residuals)
shapiro.test(a1$residuals)
shapiro.test(a2$residuals)
shapiro.test(a3$residuals)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
a1 <- Arima(train, order = c(2,0,0))
a1
a2 <- Arima(train, order = c(2,0,4))
a2
a3 <- Arima(train, order = c(2,0,1))
a3
checkresiduals(auto)
checkresiduals(a1)
checkresiduals(a2)
checkresiduals(a3)
shapiro.test(auto$residuals)
shapiro.test(a1$residuals)
shapiro.test(a2$residuals)
shapiro.test(a3$residuals)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
a1 <- Arima(train, order = c(2,0,0))
a1
a2 <- Arima(train, order = c(2,0,4))
a2
a3 <- Arima(train, order = c(2,0,1))
a3
a4 <- Arima(train, order = c(1,0,3))
a4
checkresiduals(auto)
checkresiduals(a1)
checkresiduals(a2)
checkresiduals(a3)
checkresiduals(a4)
shapiro.test(auto$residuals)
shapiro.test(a1$residuals)
shapiro.test(a2$residuals)
shapiro.test(a3$residuals)
shapiro.test(a4$residuals)
auto <- auto.arima(train, stepwise = FALSE, approximation = FALSE,seasonal = FALSE)
auto
a1 <- Arima(train, order = c(2,0,0))
a1
a2 <- Arima(train, order = c(2,0,4))
a2
a3 <- Arima(train, order = c(2,0,1))
a3
a4 <- Arima(train, order = c(1,0,3))
a4
checkresiduals(auto)
checkresiduals(a1)
checkresiduals(a2)
checkresiduals(a3)
checkresiduals(a4)
shapiro.test(auto$residuals)
shapiro.test(a1$residuals)
shapiro.test(a2$residuals)
shapiro.test(a3$residuals)
shapiro.test(a4$residuals)
train1 <- ts(traffic$Exit[1:360], frequency = 7*24)
auto2<- auto.arima(train1, stepwise = FALSE, approximation = FALSE, seasonal = TRUE)
auto2
fore1 <- forecast(auto2,h=24,level = c(80, 95))
plot(fore1)
fore1 <- forecast(auto2,h=24,level = c(80, 95))
plot(fore1)
fore1
fore1 <- forecast(auto2,h=24,level = c(80, 95))
plot(fore1)
View(fore1)
fore1
fore1 <- forecast(auto2,h=24,level = c(80, 95))
plot(fore1)
train1 <- ts(traffic$Exit[1:360], frequency = 24)
auto3<- auto.arima(train1, stepwise = FALSE, approximation = FALSE, seasonal = TRUE)
auto3
fore2 <- forecast(auto3,h=24,level = c(80, 95))
plot(fore2)
fore1$mean
fore1$mean[1]
fore1$mean[c(8,9,17,18)]
fore1$mean[c(8,9,17,18)]
fore2$mean[c(8,9,17,18)]
test
traffic$Exit
traffic
View(traffic)
actual <- traffic$Exit[c(368,369,377,378)]
f1 <- fore1$mean[c(8,9,17,18)]
f2 <- fore2$mean[c(8,9,17,18)]
actual <- traffic$Exit[c(368,369,377,378)]
err1 <- actual - f1
err2 <- actual - f2
plot(err1)
plot(err2)
sum((err1)^2)
sum((err2)^2)
